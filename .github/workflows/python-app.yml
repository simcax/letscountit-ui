# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Letscountit ui

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    outputs:
      poetry-version: ${{ steps.get-version.outputs.poetry-version }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0
    - uses: edgedb/setup-edgedb@v1
    - name: Set up Python 3.12.6
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.6
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip poetry
        poetry install --with dev
    - name: Lint with ruff
      run: |
        # Check if there are any linting errors
        poetry run ruff check
        # Check if there are any formatting errors
        poetry run ruff format
    - name: Test with pytest
      run: |
        poetry run pytest -m "not integration"
    - name: Bump poetry version
      run: |
        if [[ $(git log --format=%B -n 1 ${{ github.sha }}) == *patch* ]]; then
          poetry version patch
        elif [[ $(git log --format=%B -n 1 ${{ github.sha }}) == *minor* ]]; then
          poetry version minor
        elif [[ $(git log --format=%B -n 1 ${{ github.sha }}) == *major* ]]; then
          poetry version major
        else
          poetry version prerelease
        fi
    - name: Check pyproject.toml
      run: |
        if [[ -f pyproject.toml ]]; then
          echo "pyproject.toml exists"
        else
          echo "pyproject.toml does not exist"
          exit 1
        fi
    - name: Commit pyproject.toml
      run: |
        git add pyproject.toml
    - name: Commit and push
      uses: actions-js/push@master
      with:
        github_token: ${{ secrets.GH_TOKEN }}
        message: "[skip actions] Bump poetry version"
        branch: ${{ github.ref }}
    - name: Get Poetry version
      id: get-version
      run: |
        poetry_version=$(poetry version -s)
        echo "poetry-version=${poetry_version}" >> $GITHUB_OUTPUT


  build:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and export
      env:
        POETRY_VERSION: ${{ needs.lint-test.outputs.poetry-version }}
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: simcax/letscountit-ui:${{ env.POETRY_VERSION}}
